// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: auction.proto

package auctionpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuctionService_JoinAuction_FullMethodName = "/auctionpb.AuctionService/JoinAuction"
)

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	JoinAuction(ctx context.Context, in *Channel, opts ...grpc.CallOption) (AuctionService_JoinAuctionClient, error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) JoinAuction(ctx context.Context, in *Channel, opts ...grpc.CallOption) (AuctionService_JoinAuctionClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[0], AuctionService_JoinAuction_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceJoinAuctionClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionService_JoinAuctionClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type auctionServiceJoinAuctionClient struct {
	grpc.ClientStream
}

func (x *auctionServiceJoinAuctionClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility
type AuctionServiceServer interface {
	JoinAuction(*Channel, AuctionService_JoinAuctionServer) error
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServiceServer struct {
}

func (UnimplementedAuctionServiceServer) JoinAuction(*Channel, AuctionService_JoinAuctionServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinAuction not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_JoinAuction_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServiceServer).JoinAuction(m, &auctionServiceJoinAuctionServer{stream})
}

type AuctionService_JoinAuctionServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type auctionServiceJoinAuctionServer struct {
	grpc.ServerStream
}

func (x *auctionServiceJoinAuctionServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auctionpb.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinAuction",
			Handler:       _AuctionService_JoinAuction_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "auction.proto",
}
