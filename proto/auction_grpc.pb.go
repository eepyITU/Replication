// Followed tutoral:
// https://articles.wesionary.team/grpc-console-chat-application-in-go-dd77a29bb5c3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: proto/auction.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuctionService_JoinChannel_FullMethodName = "/proto.AuctionService/JoinChannel"
	AuctionService_SendMessage_FullMethodName = "/proto.AuctionService/SendMessage"
)

// AuctionServiceClient is the client API for AuctionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuctionServiceClient interface {
	JoinChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (AuctionService_JoinChannelClient, error)
	SendMessage(ctx context.Context, opts ...grpc.CallOption) (AuctionService_SendMessageClient, error)
}

type auctionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuctionServiceClient(cc grpc.ClientConnInterface) AuctionServiceClient {
	return &auctionServiceClient{cc}
}

func (c *auctionServiceClient) JoinChannel(ctx context.Context, in *Channel, opts ...grpc.CallOption) (AuctionService_JoinChannelClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[0], AuctionService_JoinChannel_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceJoinChannelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AuctionService_JoinChannelClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type auctionServiceJoinChannelClient struct {
	grpc.ClientStream
}

func (x *auctionServiceJoinChannelClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *auctionServiceClient) SendMessage(ctx context.Context, opts ...grpc.CallOption) (AuctionService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &AuctionService_ServiceDesc.Streams[1], AuctionService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &auctionServiceSendMessageClient{stream}
	return x, nil
}

type AuctionService_SendMessageClient interface {
	Send(*Message) error
	CloseAndRecv() (*MessageAck, error)
	grpc.ClientStream
}

type auctionServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *auctionServiceSendMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *auctionServiceSendMessageClient) CloseAndRecv() (*MessageAck, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(MessageAck)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionServiceServer is the server API for AuctionService service.
// All implementations must embed UnimplementedAuctionServiceServer
// for forward compatibility
type AuctionServiceServer interface {
	JoinChannel(*Channel, AuctionService_JoinChannelServer) error
	SendMessage(AuctionService_SendMessageServer) error
	mustEmbedUnimplementedAuctionServiceServer()
}

// UnimplementedAuctionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuctionServiceServer struct {
}

func (UnimplementedAuctionServiceServer) JoinChannel(*Channel, AuctionService_JoinChannelServer) error {
	return status.Errorf(codes.Unimplemented, "method JoinChannel not implemented")
}
func (UnimplementedAuctionServiceServer) SendMessage(AuctionService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedAuctionServiceServer) mustEmbedUnimplementedAuctionServiceServer() {}

// UnsafeAuctionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuctionServiceServer will
// result in compilation errors.
type UnsafeAuctionServiceServer interface {
	mustEmbedUnimplementedAuctionServiceServer()
}

func RegisterAuctionServiceServer(s grpc.ServiceRegistrar, srv AuctionServiceServer) {
	s.RegisterService(&AuctionService_ServiceDesc, srv)
}

func _AuctionService_JoinChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Channel)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AuctionServiceServer).JoinChannel(m, &auctionServiceJoinChannelServer{stream})
}

type AuctionService_JoinChannelServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type auctionServiceJoinChannelServer struct {
	grpc.ServerStream
}

func (x *auctionServiceJoinChannelServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _AuctionService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AuctionServiceServer).SendMessage(&auctionServiceSendMessageServer{stream})
}

type AuctionService_SendMessageServer interface {
	SendAndClose(*MessageAck) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type auctionServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *auctionServiceSendMessageServer) SendAndClose(m *MessageAck) error {
	return x.ServerStream.SendMsg(m)
}

func (x *auctionServiceSendMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuctionService_ServiceDesc is the grpc.ServiceDesc for AuctionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuctionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuctionService",
	HandlerType: (*AuctionServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JoinChannel",
			Handler:       _AuctionService_JoinChannel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendMessage",
			Handler:       _AuctionService_SendMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/auction.proto",
}
